export class List {
    length: number;

    constructor(head: any, tail: any);

    static ofArray(args: any[]): List;
    static append(xs: List, ys: any): List;
    static choose(f: (x: any) => any, xs: List): List;
    static collect(f: (x: any) => any, xs: List): List;
    static concat(xs: any): List;
    static filter(f: (x: any) => boolean, xs: List): List;
    static init(n: number, f: (i: number) => any): List;
    static map(f: (x: any) => any, xs: List): List;
    static mapi(f: (i: number, x: any) => any, xs: List): List;
    static mapi(f: (i: number, x: any) => any, xs: List): List;
    static partition(f: (x: any) => boolean, xs: List): any;
    static replicate(n: number, x: any): List;
    static rev(xs: List): List;
    static singleton(x: any): List;
    static slice(lower: any, upper: any, xs: List): List;
    static unzip(xs: List): [List, List];
    static unzip3(xs: List): [List, List, List];
}