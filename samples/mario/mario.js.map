{"version":3,"sources":["../samples/browser/mario/mario.fsx"],"names":[],"mappings":";;;;;;;;;;;;;;AAkBI,0BAAU;AAAA,WAAG,KAAH;AAAsB,GAAhC;;AAGG;AAEO,6CAAc,SAAd;;AAGR,+BACF;AAAA,aAAG,kBAAH;AAAwC,KADtC;;AAIA,mCACI;AAAA;AAAA,uBAAU,qBAAV,OACM,UAAgB;AAAA;AAAA;AAAO,SAAP;AAAO,OAAvB,GAA6B;AAAA;AAAA;AAAU,SAAV;AAAU,OAD7C,EAEJ,cAAe,wBAFX;AAAO,KADX;;AAQA;AAAA,cACD,WAAU,QADT,EACkB,WAAU,QAD5B;AAAA;;AAGA,+BACF;AAAA,2CAA2C;AAAA;AAAe,OAA1D;AAAA,yCACyC;AAAA;AAAgB,OADzD;AAC0D,KAFxD;;AApBC;AAoBG,GApBH;;AAyBA;AAED;AACA;;AAGC,yCAAS;AAAA,iBAAI,YAAJ;AAAgB,KAAzB;;AACD,6BAAY;AAAA;AAAoC,KAAhD;;AAGA,mCAAa;AAAA;AACH;AACV;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiB,OAAjB;AAHiB,KAAjB;;AAMA,uCACA;AAAA;AAAA,uBAAkB,mBAAlB;AACA,sBAAiB,gBAAC,oBAAD,iCAAjB;AAAyD,KAFzD;;AAIA;AAAA;AAAA;;AAKA,iCACI;AAAA;AAAA,8DACD,6BAAH,GAAoC,eAApC,OADI;AAAK,KADT;;AAzBC;AAyBI,GAzBJ;;AAyCF,8BAvFL;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAuFK;;AAgBD,4BAAM;AAAA;AAAA,YACL,QAAS,SAAT,QADK,aACkB,oCADlB;AAAC,GAAP;;AAIA,kCACF;AAAA;AAAA,WAAG,OAAH,SAA+B,UAA/B,EAAiB,oCAAjB;AAAkD,GADhD;;AAIA,kCACF;AAAA,qBAAa,UAAb,EAA6B,OAAQ,UAAR,CAA7B;AAAkD,GADhD;;AAIA,4BAAQ;AAAA;AAAA,iBACG,KAAH,YAA0B,KAAL,kBADrB,UAEV,kCAFU;AAAC,GAAT;;AASA,4BAAK;AAAA;AAAA,iCACP,mEADO;AAAG,GAAR;;AAiBA,gCAEA;AAAA,KAAe;AAAA;AAAA;AAAA,uBAAY,sBAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgC,SAAhC;AAAgC,OAAhC;AAAgC,KAA/C;AACA,KAAoB;AAAA;AAAA;AAAA,uBAAY,oBAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAA8B,SAA9B;AAA8B,OAA9B;AAA8B,KAAlD,QAAI,MAAJ;AAII,eAAG,WAAH,YACK,cAAL,mBADA;AAGJ,KAEG;AAAA;AAAA;AAAA,4BAAc,oBAAd,EAAiC,qBAAjC;AAAA;AAAmD,SAAnD;AAAmD,OAAnD;AAAmD,KAFtD;AAEsD,GAZtD;;AA0BJ;AACI,4CAAM,gBAAN;AAAA;AAAE;;AAEE,gCACA;AAAQ,kBAAS;AAAA;AAAA;AAAA,2BAAM,iBAAN;AAAA;AAAwB,SAAxB;AAAwB,OAAxB;AAAwB,KAAjC;;AACZ;AACA,sBAAkB;AAAA;AAAY,KAA9B,EAAgC,SAAhC;AAFS,GADL;;AAKJ,8BAAQ,8BAAR;AACJ","file":"mario.js","sourcesContent":["(**\r\n - title: Super Fable Mario\r\n - tagline: Mario clone using HTML5 canvas\r\n - app-style: height:384px; width:512px; margin:20px auto 20px auto; position:relative;\r\n - intro: Mario clone, based on functional reactive [sample written in\r\n   Elm](http://debug.elm-lang.org/edit/Mario.elm). The Fable version is using HTML 5\r\n   canvas to render the background and an `img` tag showing the Mario (using animated GIFs).\r\n   You can find the [full source code on GitHub](https://github.com/fsprojects/Fable/blob/master/samples/browser/mario/mario.fsx).\r\n\r\n   To see how it works, use the left, right and up buttons to play. Our Mario respects\r\n   no boundaries!\r\n*)\r\n(*** hide ***)\r\n#r \"node_modules/fable-core/Fable.Core.dll\"\r\nopen Fable.Core\r\nopen Fable.Import.Browser\r\n\r\n// TODO: Remove when 'max' is supported\r\nlet max a b = if a > b then a else b\r\n\r\n(*** define:boring-keyboard ***)\r\nmodule Keyboard =\r\n  /// Set of currently pressed keys\r\n  let mutable keysPressed = Set.empty\r\n\r\n  /// Returns 1 if key with given code is pressed\r\n  let code x =\r\n    if keysPressed.Contains(x) then 1 else 0\r\n\r\n  /// Update the state of the set for given key event\r\n  let update (e : KeyboardEvent, pressed) =\r\n      let keyCode = int e.keyCode\r\n      let op =  if pressed then Set.add else Set.remove\r\n      keysPressed <- op keyCode keysPressed\r\n      null\r\n\r\n  /// Returns pair with -1 for left or down and +1\r\n  /// for right or up (0 if no or both keys are pressed)\r\n  let arrows () =\r\n    (code 39 - code 37, code 38 - code 40)\r\n\r\n  let init () =\r\n    document.addEventListener_keydown(fun e -> update(e, true))\r\n    document.addEventListener_keyup(fun e -> update(e, false))\r\n\r\n(*** define:boring-window ***)\r\nmodule Win =\r\n  // Get the canvas context for drawing\r\n  let canvas = document.getElementsByTagName_canvas().[0.]\r\n  let context = canvas.getContext_2d()\r\n\r\n  // Format RGB color as \"rgb(r,g,b)\"\r\n  let ($) s n = s + n.ToString()\r\n  let rgb r g b = \"rgb(\" $ r $ \",\" $ g $ \",\" $ b $ \")\"\r\n\r\n  /// Fill rectangle with given color\r\n  let filled color rect =\r\n      let ctx = context\r\n      ctx.fillStyle <- U3.Case1 color\r\n      ctx.fillRect rect\r\n\r\n  /// Move element to a specified X Y position\r\n  let position (x,y) (img : HTMLImageElement) =\r\n      img.style.left <- x.ToString() + \"px\"\r\n      img.style.top <- (canvas.offsetTop + y).ToString() + \"px\"\r\n\r\n  let dimensions () =\r\n    canvas.width, canvas.height\r\n\r\n  /// Get the first <img /> element and set `src` (do\r\n  /// nothing if it is the right one to keep animation)\r\n  let image (src:string) =\r\n      let image = document.getElementsByTagName_img().[0.]\r\n      if image.src.IndexOf(src) = -1 then image.src <- src\r\n      image\r\n\r\n(**\r\n\r\nMario and composable physics\r\n----------------------------\r\n\r\nWe keep information about Mario in a single record type with fields that\r\nrepresent the current x and y coordinates (`x` and `y`), current velocity\r\n(`vx` and `vy`) and the current direction `dir`. The direction is used to\r\npick the correct Mario image when rendering:\r\n*)\r\n\r\ntype Mario =\r\n  { x:float; y:float;\r\n    vx:float; vy:float;\r\n    dir:string }\r\n\r\n(**\r\nThe step function of the game takes previvous `Mario` value and returns a new\r\none. It is composed from 4 functions that represent different aspects of the game.\r\n\r\nThe functions that depend on keyboard take the current keyboard state as the\r\nfirst argument. This is represented as a tuple `int*int` consisting of x and y\r\ndirections. For example, when the left key is pressed, the value is `(-1, 0)`.\r\n*)\r\n\r\n// If the Up key is pressed (y > 0) and Mario is on the ground,\r\n// then create Mario with the y velocity 'vy' set to 5\r\nlet jump (_,y) m =\r\n  if y > 0 && m.y = 0. then { m with vy = 5. } else m\r\n\r\n// If Mario is in the air, then his \"up\" velocity is decreasing\r\nlet gravity m =\r\n  if m.y > 0. then { m with vy = m.vy - 0.1 } else m\r\n\r\n// Apply physics - move Mario according to the current velocities\r\nlet physics m =\r\n  { m with x = m.x + m.vx; y = max 0. (m.y + m.vy) }\r\n\r\n// When Left/Right keys are pressed, change 'vx' and direction\r\nlet walk (x,_) m =\r\n  let dir = if x < 0 then \"left\" elif x > 0 then \"right\" else m.dir\r\n  { m with vx = float x; dir = dir }\r\n\r\n(**\r\nThe `step` function takes a `dir` parameter representing the keyboard status\r\nand a current `Mario` state. It simply runs 4 components in a pipeline:\r\n*)\r\n\r\nlet step dir mario =\r\n  mario |> physics |> walk dir |> gravity |> jump dir\r\n\r\n(**\r\n\r\nRendering Mario with HTML5\r\n--------------------------\r\n\r\nNow we're ready to render Mario using HTML 5 canvas! To do that, we need the\r\nwidth and height of the canvas and the current state of Mario. The following\r\nfunction fills the bottom half of the canvas with green, upper half with blue\r\nand then chooses the right Mario image. It uses helpers from the `Win`\r\nmodule, which are discussed below:\r\n\r\n*)\r\n\r\n/// Render mario on canvas\r\nlet render (w,h) (mario:Mario) =\r\n    // Render background\r\n    (0.,0.,w,h) |> Win.filled (Win.rgb 174 238 238)\r\n    (0.,h-50.,w,50.) |> Win.filled (Win.rgb 74 163 41)\r\n    // Select and position Mario\r\n    // (walking is represented as an animated gif)\r\n    let verb =\r\n        if mario.y > 0. then \"jump\"\r\n        elif mario.vx <> 0. then \"walk\"\r\n        else \"stand\"\r\n    \"images/mario\" + verb + mario.dir + \".gif\"\r\n    |> Win.image\r\n    |> Win.position (w/2.-16.+mario.x,  h-50.-31.-mario.y)\r\n\r\n(**\r\n\r\nDriving the game\r\n----------------\r\n\r\nThe last thing that needs to be done is to write the `main` function that drives\r\nthe game. The function does some initialization and then starts a recursive `update`\r\nfunction that calculates a new game state using `step` and renders it in a loop.\r\nThe `Keyboard` helper module is discussed below.\r\n*)\r\n\r\n// Some initialization\r\nKeyboard.init()\r\nlet w,h = Win.dimensions()\r\n// Recursive function that updates the state & renders it\r\nlet rec update mario () =\r\n    let mario = mario |> step (Keyboard.arrows())\r\n    render (w,h) mario\r\n    window.setTimeout(update mario, 1000. / 60.) |> ignore\r\n// Start the game with Mario in the center\r\nlet mario = { x=0.; y=0.; vx=0.; vy=0.; dir=\"right\" }\r\nupdate mario ()\r\n\r\n(**\r\nKeyboard helpers\r\n----------------\r\n\r\nThe `Keyboard` module handles keydown and keyup events of the window and\r\nexposes them using the `arrows` property (which is a tuple int*int with -1 if the\r\nleft/up key is pressed, 1 if right/down key is pressed and 0 otherwise).\r\n*)\r\n(*** include:boring-keyboard ***)\r\n\r\n(**\r\nWindow helpers\r\n--------------\r\n\r\nThe `Window` module contains basic functionality for creating and rendering\r\nwindow using HTML5 canvas and moving images around. The functionsbelow\r\nfill the window, set position of image and create image.\r\n*)\r\n(*** include:boring-window ***)\r\n"]}